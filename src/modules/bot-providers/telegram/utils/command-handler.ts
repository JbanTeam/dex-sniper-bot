import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

import { UserService } from '@modules/user/user.service';
import { RedisService } from '@modules/redis/redis.service';
import { chains, helpMessage, startMessage } from '@src/utils/constants';
import { IncomingMessage, SendMessageOptions } from '@src/types/types';
import { Address } from 'viem';

@Injectable()
export class CommandHandler {
  constructor(
    private readonly userService: UserService,
    private readonly redisService: RedisService,
    private readonly configService: ConfigService,
  ) {}

  async handleCommand(message: IncomingMessage): Promise<{ text: string; options?: SendMessageOptions }> {
    const command = message.text;

    switch (true) {
      case command.startsWith('/start'):
        return { text: startMessage };
      case command.startsWith('/help'):
        return { text: helpMessage };
      case command.startsWith('/addtoken'):
        return this.addToken(message);
      case command.startsWith('/removetoken'):
        return this.removeToken(message);
      case command.startsWith('/balance'):
        return this.getBalance(message);
      default:
        return { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.' };
    }
  }

  private async addToken(message: IncomingMessage): Promise<{ text: string; options?: SendMessageOptions }> {
    const [, tokenAddress] = message.text.split(' ');

    const userSession = await this.redisService.getSessionData(message.chatId.toString());

    if (!tokenAddress) {
      return {
        text: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: /addtoken [–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞]',
        options: { parse_mode: 'html' },
      };
    }

    await this.redisService.setSessionData(message.chatId.toString(), {
      ...userSession,
      tempToken: tokenAddress,
    });

    const chainsArr = Object.entries(chains(this.configService));
    const keardboard = chainsArr.map(([keyNetwork, value]) => {
      return [{ text: value.name, callback_data: `add-${keyNetwork}` }];
    });

    return {
      text: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à —Ç–æ–∫–µ–Ω:',
      options: {
        parse_mode: 'html',
        reply_markup: { inline_keyboard: keardboard },
      },
    };
  }

  private async removeToken(message: IncomingMessage): Promise<{ text: string; options?: SendMessageOptions }> {
    const [, tokenAddress] = message.text.split(' ');

    const userSession = await this.redisService.getSessionData(message.chatId.toString());

    if (!userSession || !userSession.userId || !userSession.chatId) return { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω' };

    try {
      if (tokenAddress) {
        const deletedToken = await this.userService.removeToken({
          userId: userSession.userId,
          chatId: userSession.chatId,
          address: tokenAddress as Address,
        });

        if (!deletedToken.affected) return { text: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω' };

        return { text: '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üî•' };
      }

      const keyboard = userSession.wallets?.map(wallet => {
        const network = chains(this.configService)[wallet.network];
        return [{ text: `${network.name}`, callback_data: `rm-${wallet.network}` }];
      });
      keyboard?.push([{ text: '–í—Å–µ —Ç–æ–∫–µ–Ω—ã', callback_data: 'rm-all' }]);

      return {
        text: `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –£–¥–∞–ª–∏—Ç—å <u>–≤—Å–µ</u> —Ç–æ–∫–µ–Ω—ã\n2. –£–¥–∞–ª–∏—Ç—å <u>–≤—Å–µ</u> —Ç–æ–∫–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏`,
        options: {
          parse_mode: 'html',
          reply_markup: { inline_keyboard: keyboard },
        },
      };
    } catch (error) {
      console.log(`Error while removing token: ${error.message}`);
      return { text: `${error.message}` };
    }
  }

  private async getBalance(message: IncomingMessage): Promise<{ text: string; options?: SendMessageOptions }> {
    const userSession = await this.redisService.getSessionData(message.chatId.toString());

    if (!userSession || !userSession.userId || !userSession.wallets) return { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω' };

    const keyboard = userSession.wallets?.map(wallet => {
      return [{ text: `${wallet.network}: ${wallet.address}`, callback_data: `balance-${wallet.id}` }];
    });

    return { text: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:', options: { reply_markup: { inline_keyboard: keyboard } } };
  }
}
