import { HttpStatus, Injectable, Logger } from '@nestjs/common';

import { BotError } from '@libs/core/errors';
import { IncomingMessage, TokenAddressType } from '@src/types/types';
import { strIsPositiveNumber } from '@libs/core/utils';
import { WalletService } from '@modules/wallet/wallet.service';
import { RedisService } from '@modules/redis/redis.service';
import { BlockchainService } from '@modules/blockchain/blockchain.service';
import { UserTokenService } from '@modules/user-token/user-token.service';
import { ConstantsProvider } from '@modules/constants/constants.provider';
import { ReplicationService } from '@modules/replication/replication.service';
import { SubscriptionService } from '@modules/subscription/subscription.service';
import { BaseCommandHandler } from '@src/common/bot-handlers/BaseCommandHandler';
import { isBuySell, isEtherAddress } from '@src/types/typeGuards';
import { commandsRegexp, HELP_MESSAGE, START_MESSAGE } from '@src/constants';
import { TgCommandFunction, TgCommandReturnType, TgSendMessageOptions } from '../types/types';

@Injectable()
export class TgCommandHandler extends BaseCommandHandler<IncomingMessage, TgCommandReturnType> {
  constructor(
    private readonly tokenService: UserTokenService,
    private readonly redisService: RedisService,
    private readonly blockchainService: BlockchainService,
    private readonly subscriptionService: SubscriptionService,
    private readonly replicationService: ReplicationService,
    private readonly walletService: WalletService,
    private readonly constants: ConstantsProvider,
  ) {
    const logger = new Logger(TgCommandHandler.name);
    super(logger);
  }

  handleCommand: TgCommandFunction = async message => {
    const commandPatterns: [RegExp, TgCommandFunction][] = [
      [commandsRegexp.start, async () => ({ text: START_MESSAGE })],
      [commandsRegexp.help, async () => ({ text: HELP_MESSAGE })],
      [commandsRegexp.wallets, this.getWallets],
      [commandsRegexp.addToken, this.addToken],
      [commandsRegexp.removeToken, this.removeToken],
      [commandsRegexp.tokens, this.getTokens],
      [commandsRegexp.follow, this.subscribe],
      [commandsRegexp.unfollow, this.unsubscribe],
      [commandsRegexp.subscriptions, this.getSubscriptions],
      [commandsRegexp.replicate, this.replicate],
      [commandsRegexp.replications, this.getReplications],
      [commandsRegexp.balance, this.getBalance],
      [commandsRegexp.send, this.sendTokens],
      [commandsRegexp.fakeTo, this.fakeSwapTo],
      [commandsRegexp.fakeFrom, this.fakeSwapFrom],
    ];

    for (const [pattern, handler] of commandPatterns) {
      if (pattern.test(message.text)) {
        return handler(message);
      }
    }

    return { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.' };
  };

  addToken: TgCommandFunction = async message => {
    const [, tokenAddr] = message.text.split(' ');
    const tokenAddress = tokenAddr.toLowerCase().trim();

    try {
      const userExists = await this.redisService.existsInSet('users', message.chatId.toString());

      if (!userExists) throw new BotError('User not found', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);

      isEtherAddress(tokenAddress, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: /addtoken [–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞]');

      await this.redisService.setUserField(message.chatId, 'tempToken', tokenAddress);

      const chainsArr = Object.entries(this.constants.chains);
      const keardboard = chainsArr.map(([keyNetwork, value]) => {
        return [{ text: value.name, callback_data: `add-${keyNetwork}` }];
      });

      return {
        text: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à —Ç–æ–∫–µ–Ω:',
        options: {
          parse_mode: 'html',
          reply_markup: { inline_keyboard: keardboard },
        },
      };
    } catch (error) {
      return this.handleError(error, 'Error while adding token', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞');
    }
  };

  removeToken: TgCommandFunction = async message => {
    try {
      const [, tokenAddr] = message.text.split(' ');
      const tokenAddress = tokenAddr?.toLowerCase().trim();
      const userSession = await this.redisService.getUser(message.chatId);

      if (!userSession.tokens?.length) {
        throw new BotError('You have no saved tokens', '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤', HttpStatus.NOT_FOUND);
      }

      if (tokenAddress) {
        isEtherAddress(tokenAddress);
        await this.tokenService.removeToken({
          chatId: userSession.chatId,
          address: tokenAddress,
        });

        return { text: '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üî•' };
      }

      const keyboard = userSession.wallets?.map(wallet => {
        const chain = this.constants.chains[wallet.network];
        return [{ text: `${chain.name}`, callback_data: `rm-${wallet.network}` }];
      });

      keyboard?.push([{ text: '–í—Å–µ —Ç–æ–∫–µ–Ω—ã', callback_data: 'rm-all' }]);

      return {
        text: `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã\n2. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏`,
        options: {
          parse_mode: 'html',
          reply_markup: { inline_keyboard: keyboard },
        },
      };
    } catch (error) {
      return this.handleError(error, 'Error while removing token', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞');
    }
  };

  getTokens: TgCommandFunction = async message => {
    try {
      const reply = await this.tokenService.getTokens(message.chatId);

      return { text: reply, options: { parse_mode: 'html' } };
    } catch (error) {
      return this.handleError(error, 'Error while getting tokens', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤');
    }
  };

  getWallets: TgCommandFunction = async message => {
    try {
      const reply = await this.walletService.getWallets(message.chatId);

      return { text: reply, options: { parse_mode: 'html' } };
    } catch (error) {
      return this.handleError(error, 'Error while getting wallets', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤');
    }
  };

  subscribe: TgCommandFunction = async message => {
    try {
      const [, walletAddr] = message.text.split(' ');
      const walletAddress = walletAddr.toLowerCase().trim();

      isEtherAddress(walletAddress, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–∏–º–µ—Ä: /follow [–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞]');

      await this.redisService.setUserField(message.chatId, 'tempWallet', walletAddress);

      const chainsArr = Object.entries(this.constants.chains);
      const keardboard = chainsArr.map(([keyNetwork, value]) => {
        return [{ text: `${value.exchange} (${keyNetwork})`, callback_data: `subnet-${keyNetwork}` }];
      });

      return {
        text: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–º–µ–Ω–Ω–∏–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:',
        options: {
          parse_mode: 'html',
          reply_markup: { inline_keyboard: keardboard },
        },
      };
    } catch (error) {
      return this.handleError(error, 'Error while subscribing to address', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–æ—à–µ–ª–µ–∫');
    }
  };

  unsubscribe: TgCommandFunction = async message => {
    try {
      const [, walletAddr] = message.text.split(' ');
      const walletAddress = walletAddr.toLowerCase().trim();

      isEtherAddress(walletAddress, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–∏–º–µ—Ä: /follow [–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞]');

      await this.subscriptionService.unsubscribeFromWallet({
        chatId: message.chatId,
        walletAddress,
      });

      return { text: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–æ—à–µ–ª—å–∫–∞ ‚úÖ', options: { parse_mode: 'html' } };
    } catch (error) {
      return this.handleError(error, 'Error while unsubscribing from address', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞');
    }
  };

  getSubscriptions: TgCommandFunction = async message => {
    try {
      const reply = await this.subscriptionService.getSubscriptions(message.chatId);

      return { text: reply, options: { parse_mode: 'html' } };
    } catch (error) {
      return this.handleError(error, 'Error while getting subscriptions', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫');
    }
  };

  replicate: TgCommandFunction = async message => {
    try {
      const [, action, limit] = message.text.split(' ');

      if (!strIsPositiveNumber(limit)) {
        throw new BotError(
          'Enter correct command',
          '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É. –ü—Ä–∏–º–µ—Ä: /replicate buy 100',
          HttpStatus.BAD_REQUEST,
        );
      }

      isBuySell(action);

      const userSession = await this.redisService.getUser(message.chatId);

      if (!userSession.subscriptions?.length) {
        throw new BotError('You have no subscriptions', '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ—à–µ–ª—å–∫–∏', HttpStatus.NOT_FOUND);
      }

      if (!userSession.tokens.length) {
        throw new BotError('You have no tokens', '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã', HttpStatus.NOT_FOUND);
      }

      await this.redisService.setUserField(
        message.chatId,
        'tempReplication',
        JSON.stringify({ action, limit, chatId: message.chatId, userId: userSession.userId }),
      );

      const keyboard = userSession.subscriptions.map(sub => {
        return [{ text: `${sub.network}: ${sub.address}`, callback_data: `repl-${sub.id}-${sub.network}` }];
      });

      return {
        text: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:',
        options: { reply_markup: { inline_keyboard: keyboard } },
      };
    } catch (error) {
      return this.handleError(
        error,
        'Error while setting replication params',
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≤—Ç–æ—Ä–∞ —Å–¥–µ–ª–æ–∫',
      );
    }
  };

  getReplications: TgCommandFunction = async message => {
    try {
      const reply = await this.replicationService.getReplications(message.chatId);

      return { text: reply, options: { parse_mode: 'html' } };
    } catch (error) {
      return this.handleError(error, 'Error while getting replications', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫');
    }
  };

  getBalance: TgCommandFunction = async message => {
    try {
      const wallets = await this.redisService.getWallets(message.chatId);

      const keyboard = wallets?.map(wallet => {
        return [{ text: `${wallet.network}: ${wallet.address}`, callback_data: `balance-${wallet.id}` }];
      });

      return { text: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:', options: { reply_markup: { inline_keyboard: keyboard } } };
    } catch (error) {
      return this.handleError(error, 'Error while getting balance', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
    }
  };

  sendTokens: TgCommandFunction = async message => {
    try {
      const parts = message.text.split(' ');

      if (parts.length !== 3 && parts.length !== 4) {
        throw new BotError('Invalid format', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã', HttpStatus.BAD_REQUEST);
      }

      let tokenAddress: string | null = null;
      let amount: string;
      let recipientAddress: string;

      if (parts.length === 4) {
        [, tokenAddress, amount, recipientAddress] = parts;

        isEtherAddress(tokenAddress, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞');
      } else {
        [, amount, recipientAddress] = parts;
      }

      isEtherAddress(recipientAddress, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');

      if (!strIsPositiveNumber(amount)) {
        throw new BotError('Enter correct amount', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', HttpStatus.BAD_REQUEST);
      }

      await this.redisService.setUserField(
        message.chatId,
        'tempSendTokens',
        `${tokenAddress || TokenAddressType.NATIVE}:${amount}:${recipientAddress}`,
      );

      const networks = Object.entries(this.constants.chains);
      const keyboard = networks.map(([network, value]) => {
        return [{ text: `${value.name}`, callback_data: `send-${network}` }];
      });

      return {
        text: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:',
        options: { reply_markup: { inline_keyboard: keyboard } },
      };
    } catch (error) {
      return this.handleError(error, 'Error while sending tokens', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–æ–≤');
    }
  };

  handleError(error: unknown, errMsg: string, userMsg: string): { text: string; options?: TgSendMessageOptions } {
    this.logger.error(`${errMsg}`, error);

    if (error instanceof BotError) {
      return { text: error.userMessage, options: { parse_mode: 'html' } };
    }

    return { text: userMsg, options: { parse_mode: 'html' } };
  }

  private fakeSwapTo: TgCommandFunction = async message => {
    if (this.constants.NODE_ENV === 'production') {
      return { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /help' };
    }

    try {
      const testTokens = await this.redisService.getTokens(message.chatId, 'testTokens');

      if (!testTokens?.length) {
        throw new BotError(
          'You have no tokens',
          '–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
          HttpStatus.BAD_REQUEST,
        );
      }

      const testToken = testTokens[0];

      if (!testToken) throw new BotError('Token not found', '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω', HttpStatus.NOT_FOUND);

      await this.blockchainService.fakeSwapTo(testToken);

      return { text: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', options: { parse_mode: 'html' } };
    } catch (error) {
      return this.handleError(error, 'Error while sending fake transaction', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }
  };

  private fakeSwapFrom: TgCommandFunction = async message => {
    if (this.constants.NODE_ENV === 'production') {
      return { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /help' };
    }

    try {
      const testTokens = await this.redisService.getTokens(message.chatId, 'testTokens');

      if (!testTokens?.length) {
        throw new BotError(
          'You have no tokens',
          '–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
          HttpStatus.BAD_REQUEST,
        );
      }
      const testToken = testTokens[0];

      if (!testToken) throw new BotError('Token not found', '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω', HttpStatus.NOT_FOUND);
      await this.blockchainService.fakeSwapFrom(testToken);

      return { text: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', options: { parse_mode: 'html' } };
    } catch (error) {
      return this.handleError(error, 'Error while sending fake transaction', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }
  };
}
